name: Prepare for Demo

on:
  push:
    branches: [ main, development ]
    paths:
      - 'infra/**'
      - 'docs/**'
      - '.github/workflows/prepare-for-demo.yml'
      - 'README.md'
  pull_request:
    paths:
      - 'infra/**'
      - 'docs/**'
      - '.github/workflows/prepare-for-demo.yml'
      - 'README.md'
  workflow_dispatch:
    inputs:
      run_demo:
        description: 'Run demo after validation (true/false)'
        required: false
        default: 'true'
      environment:
        description: 'Environment for demo (test or prod)'
        required: false
        default: 'test'
      auto_destroy:
        description: 'Destroy after demo (true/false)'
        required: false
        default: 'true'

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      TF_IN_AUTOMATION: true
      TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform-cache
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Set up TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: latest

      - name: Initialize TFLint plugins
        working-directory: infra
        run: tflint --init

      - name: Terraform fmt
        working-directory: infra
        run: terraform fmt -check -recursive

      - name: TFLint
        working-directory: infra
        run: tflint

      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: infra

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Init
        working-directory: infra
        run: |
          mkdir -p "${TF_PLUGIN_CACHE_DIR}"
          terraform init -input=false -backend-config=backend-test.hcl
      - name: Terraform Validate
        working-directory: infra
        run: terraform validate

      - name: Terraform Plan
        working-directory: infra
        env:
          TF_VAR_aws_profile: ""
        run: terraform plan -lock=false -var-file=environments/test/vars.tfvars -out=tfplan

      - name: Terraform Show Plan
        working-directory: infra
        run: terraform show -no-color tfplan > tfplan.txt

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            infra/tfplan
            infra/tfplan.txt
  
  demo_apply:
    name: Create Demo Infra & Do Testing
    needs: validate
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.run_demo == 'true'
    runs-on: ubuntu-latest
    environment:
      name: demo-${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read
    env:
      TF_IN_AUTOMATION: true
      TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform-cache
      TERRAFORM_ENV: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Init
        working-directory: infra
        run: |
          mkdir -p "${TF_PLUGIN_CACHE_DIR}"
          terraform init -input=false -backend-config=backend-${{ env.TERRAFORM_ENV }}.hcl
      - name: Terraform Plan
        working-directory: infra
        run: terraform plan -var-file=environments/${{ env.TERRAFORM_ENV }}/vars.tfvars -out=tfplan

      - name: Terraform Apply
        working-directory: infra
        run: terraform apply -auto-approve tfplan

      - name: Run verification script
        working-directory: infra
        env:
          REPORT_FILE: ../verification-report.md
        run: ./scripts/verify_nat.sh ${{ env.TERRAFORM_ENV }}

      - name: Collect probe logs
        id: probe_logs
        run: |
          set -euo pipefail

          REPORT_DIR="${PWD}"
          COMMAND_JSON="${REPORT_DIR}/probe-command.json"
          INVOCATIONS_JSON="${REPORT_DIR}/probe-command-invocations.json"
          LOG_SUMMARY="${REPORT_DIR}/probe-logs.txt"

          send_output=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets Key=tag:Project,Values=nat-alternative Key=tag:Environment,Values=${{ env.TERRAFORM_ENV }} Key=tag:Role,Values=probe \
            --parameters commands='sudo journalctl -u cloud-init --no-pager | tail -n 200' \
            --region ${{ vars.AWS_REGION }} \
            --comment "Collect probe user-data logs" \
            --output json)

          echo "$send_output" >"${COMMAND_JSON}"
          command_id=$(echo "$send_output" | jq -r '.Command.CommandId // empty')

          if [[ -z "${command_id}" ]]; then
            printf 'No probe instances matched the tag selectors.\n' >"${LOG_SUMMARY}"
            printf '{"CommandInvocations":[]}' >"${INVOCATIONS_JSON}"
            exit 0
          fi

          aws ssm wait command-executed \
            --command-id "${command_id}" \
            --region ${{ vars.AWS_REGION }} || true

          aws ssm list-command-invocations \
            --command-id "${command_id}" \
            --details \
            --region ${{ vars.AWS_REGION }} \
            --output json >"${INVOCATIONS_JSON}" || true

          if jq -e '.CommandInvocations | length > 0' "${INVOCATIONS_JSON}" >/dev/null 2>&1; then
            jq -r '.CommandInvocations[] | ["InstanceId: " + (.InstanceId // "<unknown>"),
                     "Status: " + (.StatusDetails // "<unknown>"),
                     "----- stdout -----",
                     (.StandardOutputContent // "<empty>"),
                     "----- stderr -----",
                     (.StandardErrorContent // "<empty>"),
                     ""] | @text' "${INVOCATIONS_JSON}" >"${LOG_SUMMARY}"
          else
            printf 'No command invocations were returned (probes may have completed before logging).\n' >"${LOG_SUMMARY}"
          fi
        continue-on-error: true

      - name: Upload verification artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verification-${{ env.TERRAFORM_ENV }}
          path: |
            verification-report.md
            probe-command.json
            probe-command-invocations.json
            probe-logs.txt
            log-collector-output.json
            demo-health-output.json

  demo_destroy:
    name: CleanUp Demo Infra
    needs: demo_apply
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.run_demo == 'true' && github.event.inputs.auto_destroy == 'true'
    runs-on: ubuntu-latest
    environment:
      name: teardown-${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read
    env:
      TF_IN_AUTOMATION: true
      TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform-cache
      TERRAFORM_ENV: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Init
        working-directory: infra
        run: |
          mkdir -p "${TF_PLUGIN_CACHE_DIR}"
          terraform init -input=false -backend-config=backend-${{ env.TERRAFORM_ENV }}.hcl

      - name: Destroy demo resources
        working-directory: infra
        run: terraform destroy -auto-approve -var-file=environments/${{ env.TERRAFORM_ENV }}/vars.tfvars
